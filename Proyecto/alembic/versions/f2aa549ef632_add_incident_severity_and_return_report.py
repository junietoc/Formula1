"""add_incident_severity_and_return_report

Revision ID: f2aa549ef632
Revises: 0001
Create Date: 2025-07-19 12:32:49.399466

"""
# Alembic helpers
from alembic import op
import sqlalchemy as sa

# Extra: runtime inspection helpers to detect existing tables/columns
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = 'f2aa549ef632'
down_revision = '0001'
branch_labels = None
depends_on = None


# ---------------------------------------------------------------------------
# IMPORTANT: This migration may be executed against an existing SQLite file
# that already contains the "return_reports" table (because the initial
# migration uses Base.metadata.create_all).  To make the migration idempotent
# we first inspect the current DB schema and only create the objects that are
# missing.
# ---------------------------------------------------------------------------


def _table_exists(inspector, name: str) -> bool:
    """Return True if *name* exists among inspector.get_table_names()."""
    return name in inspector.get_table_names()


def _column_exists(inspector, table: str, column: str) -> bool:
    """Return True if *column* is present in *table*."""
    return column in [c["name"] for c in inspector.get_columns(table)]


def upgrade() -> None:  # noqa: D401 – Alembic signature
    bind = op.get_bind()
    inspector = inspect(bind)

    # 1) Tabla return_reports ------------------------------------------------
    if not _table_exists(inspector, "return_reports"):
        op.create_table(
            "return_reports",
            sa.Column("id", sa.UUID(), primary_key=True, nullable=False),
            sa.Column("loan_id", sa.UUID(), nullable=False),
            sa.Column("total_incident_days", sa.Integer()),
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
            ),
            sa.Column("created_by", sa.UUID()),
            sa.ForeignKeyConstraint(["created_by"], ["users.id"]),
            sa.ForeignKeyConstraint(["loan_id"], ["loans.id"]),
        )
        op.create_index(
            "ix_return_reports_loan_id", "return_reports", ["loan_id"], unique=False
        )

    # 2) Columna return_report_id en incidents ------------------------------
    if not _column_exists(inspector, "incidents", "return_report_id"):
        op.add_column("incidents", sa.Column("return_report_id", sa.UUID()))
        op.create_foreign_key(
            "fk_incident_return_report",
            "incidents",
            "return_reports",
            ["return_report_id"],
            ["id"],
        )

    # NOTA: Para SQLite mantenemos severity como SmallInteger; cualquier cambio
    # se manejará a nivel de aplicación.
    # -----------------------------------------------------------------------


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # NOTE: keep downgrade simple; only attempt to drop objects if they exist.
    bind = op.get_bind()
    inspector = inspect(bind)

    if _column_exists(inspector, "incidents", "return_report_id"):
        op.drop_constraint("fk_incident_return_report", "incidents", type_="foreignkey")
        op.drop_column("incidents", "return_report_id")

    if _table_exists(inspector, "return_reports"):
        if "ix_return_reports_loan_id" in [ix["name"] for ix in inspector.get_indexes("return_reports")]:
            op.drop_index("ix_return_reports_loan_id", table_name="return_reports")
        op.drop_table("return_reports")
    # ### end Alembic commands ### 